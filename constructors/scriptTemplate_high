#!/usr/bin/python
# -*- coding: utf-8 -*-
# old_style:google style:google
r"""
    ハイモデルを構築するための処理を記述したモジュール。
    
    Dates:
        date:2025/06/01 22:07 Eske Yoshinob[eske3g@gmail.com]
        update:2025/06/01 22:07 Eske Yoshinob[eske3g@gmail.com]
        
    License:
        Copyright 2025 Eske Yoshinob[eske3g@gmail.com] - All Rights Reserved
        Unauthorized copying of this file, via any medium is strictly prohibited
        Proprietary and confidential
"""
from gris3 import constructors, func, node
mainModule = constructors.mainModule(__name__, True)
cmds = func.cmds

# /////////////////////////////////////////////////////////////////////////////
# ラップするオブジェクトを辞書型で定義する。
# キーでケージ指定し、バリューにはラップされるオブジェクトのリストを指定する。
WrapListLR = {
}
WrapList = {
}

# ベースジョイントからレンダーオブジェクトへペアレントするオブジェクトを辞書で
# キーで親ジョイントを指定し、バリューには子となるレンダーオブジェクトのリスト
# を指定する。
ParentListLR = {
}
ParentList = {
}
# /////////////////////////////////////////////////////////////////////////////

class Constructor(mainModule.Constructor):
    r"""
        ハイモデルのリグを構築するクラス。
    """
    def preSetupForLOD(self):
        r"""
            setupメソッド前に実行される事前準備用のメソッド。
        """
        # バインドジョイントを作成する。
        # self.createBindJoint('hip_jnt_C')

        # ExtraJointを読み込む。
        self.loadExtraJoints()
        # スキンのウェイトを読み込む。
        self.loadSkinWeights()

    def wrapObjects(self):
        r"""
            WrapList(LR)で定義されたオブジェクトをラップする。
        """
        for s in func.SuffixIter():
            for cage in WrapListLR:
                self.localWrap([x*s for x in WrapListLR[cage]], cage*s)
        for cage in WrapList:
            self.localWrap(WrapList[cage], cage)

    def parent(self):
        r"""
            ParentList(LR)で定義されたオブジェクトを親子付する。
        """
        def matrixConstraint(parent, target, mtx_nodes=None):
            r"""
                matrixを仕様して親子付を行う。
                
                Args:
                    parent (str):
                    target (str):
                    mtx_nodes (list):
                    
                Returns:
                    list:
            """
            if not mtx_nodes:
                mtx_nodes = self.createMatrixConstraint(parent, target)
            else:
                func.makeDecomposeMatrixConnection(mtx_nodes[0], [target])
            return mtx_nodes
        for s in func.SuffixIter():
            for parent in ParentListLR:
                mtx_nodes = None
                for target in ParentListLR[parent]:
                    mtx_nodes = matrixConstraint(
                        s(parent), s(target), mtx_nodes
                    )
        for parent in ParentList:
            mtx_nodes = None
            for target in ParentList[parent]:
                mtx_nodes = matrixConstraint(parent, target, mtx_nodes)

    def setup(self):
        r"""
            コントローラのセットアップを行う。
        """
        super(Constructor, self).setup()

        # ドリブンキーをロードする。
        self.loadDrivenKeys()
        # WrapListで定義されたオブジェクトをラップする。
        self.wrapObjects()
        # ParentListで定義されたオブジェクトを親子付けする。
        self.parent()

    def postProcessForLOD(self):
        r"""
            処理終了後の後処理を行う。
        """
        pass
